{"version":3,"sources":["Components/FileUploadComponent.js","serviceWorker.js","index.js"],"names":["Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","StyledDropzone","useDropzone","accept","getRootProps","getInputProps","acceptedFiles","files","map","file","key","path","size","className","type","onClick","e","preventDefault","form","FormData","forEach","item","index","append","axios","post","headers","then","res","status","Swal","fire","title","text","icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6pBAOA,IAaMA,EAAYC,IAAOC,IAAV,KAQG,SAAAC,GAAK,OArBN,SAACA,GAChB,OAAIA,EAAMC,aACC,UAEPD,EAAME,aACC,UAEPF,EAAMG,aACC,UAEJ,UAWkBC,CAASJ,MA0ErBK,MAlEf,SAAwBL,GAAO,MAoCzBM,YAAY,CAACC,OAAQ,uEANvBC,EA9B2B,EA8B3BA,aACAC,EA/B2B,EA+B3BA,cACAN,EAhC2B,EAgC3BA,aACAF,EAjC2B,EAiC3BA,aACAC,EAlC2B,EAkC3BA,aACAQ,EAnC2B,EAmC3BA,cAEIC,EAAQD,EAAcE,KAAI,SAAAC,GAAI,OAClC,wBAAIC,IAAKD,EAAKE,MACXF,EAAKE,KADR,MACiBF,EAAKG,KADtB,aAIF,OACE,yBAAKC,UAAU,QACf,yBAAKA,UAAU,UACX,4BAAQA,UAAU,gBAAgBC,KAAK,SAASC,QA3CtD,SAAsBC,GACpBA,EAAEC,iBACF,IAAMC,EAAO,IAAIC,SACjBb,EAAcc,SAAQ,SAACC,EAAKC,GAC1BJ,EAAKK,OAAO,OAAOF,MAErBG,IAAMC,KAAK,UAAWP,EAAM,CAC1BQ,QAAS,CAAE,eAAgB,yBAC1BC,MAAK,SAAAC,GACW,MAAdA,EAAIC,OACLC,IAAKC,KAAK,CACRC,MAAO,WACPC,KAAM,6BACNC,KAAM,YAIRJ,IAAKC,KAAK,CACRC,MAAO,UACPC,KAAM,8BACNC,KAAM,eAuBR,gBAEJ,yBAAKrB,UAAU,aACf,kBAACpB,EAAcW,EAAa,CAACL,eAAcF,eAAcC,iBACvD,0BAAWO,KACX,sFACCN,IAAiBD,GAAgB,yBACjCA,GAAgB,mCAGnB,6BACA,yBAAKe,UAAU,SACX,qCACA,4BAAKN,MClFO4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e6b03fe1.chunk.js","sourcesContent":["import React ,{useCallback}from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport styled from 'styled-components';\nimport './FileUploadComponent.css';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\n\nconst getColor = (props) => {\n  if (props.isDragAccept) {\n      return '#00e676';\n  }\n  if (props.isDragReject) {\n      return '#ff1744';\n  }\n  if (props.isDragActive) {\n      return '#2196f3';\n  }\n  return '#eeeeee';\n}\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${props => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #bdbdbd;\n  outline: none;\n  transition: border .24s ease-in-out;\n`;\n\nfunction StyledDropzone(props) {\n\n  function handleUpload(e){\n    e.preventDefault();\n    const form = new FormData()\n    acceptedFiles.forEach((item,index)=>{\n      form.append('file',item)\n    })\n    axios.post('/upload', form, {\n      headers: { 'Content-Type': 'multipart/form-data' },\n    }).then(res=>{\n      if(res.status ===200){\n        Swal.fire({\n          title: 'Success!',\n          text: 'File Uploaded Successfully',\n          icon: 'success'\n        })\n      }else\n      {\n        Swal.fire({\n          title: 'Failed!',\n          text: 'Ops...Something Went Wrong!',\n          icon: 'error'\n        })\n      }\n    })\n   \n  }\n  \n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n    acceptedFiles\n  } = useDropzone({accept: 'zip,application/zip,application/x-zip,application/x-zip-compressed'});\n  const files = acceptedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} - {file.size} bytes\n    </li>\n  ));\n  return (\n    <div className=\"page\">\n    <div className=\"btndiv\">\n        <button className=\"btn btn-light\" type=\"button\" onClick={handleUpload}>Upload File</button>\n    </div>\n    <div className=\"container\">\n    <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})}>\n      <input {...getInputProps()} />\n      <p>Drag 'n' drop some files here, or click to select files</p>\n      {isDragActive && !isDragReject && \"Drop it like it's hot!\"}\n      {isDragReject && \"File type not accepted, sorry!\"}\n    </Container>\n    </div>\n    <br/>\n    <div className=\"files\">\n        <h4>Files</h4>\n        <ul>{files}</ul>\n    </div>\n    \n  </div>   \n   \n  );\n}\n\nexport default StyledDropzone;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport StyledDropzone from \"./Components/FileUploadComponent\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StyledDropzone />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}